{-# OPTIONS --cubical --safe #-}

module Algebra.Construct.Dyck where

open import Prelude
open import Algebra
open import Data.Nat using (_+_)
import Data.Nat.Properties as ‚Ñï
open import Agda.Builtin.Nat using (_-_)

record Bal : Type‚ÇÄ where
  constructor _‚ü©‚ü®_
  field
    left  : ‚Ñï
    right : ‚Ñï
open Bal public

infix 4.5 _‚ü©-‚ü®_ _‚ü©‚ü®_ _+‚ü®_‚ü©+_ _+‚ü®‚ü©+_

_‚ü©-‚ü®_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Bal
zero  ‚ü©-‚ü® m     = zero  ‚ü©‚ü® m
suc n ‚ü©-‚ü® zero  = suc n ‚ü©‚ü® zero
suc n ‚ü©-‚ü® suc m = n ‚ü©-‚ü® m

_+‚ü®_‚ü©+_ : ‚Ñï ‚Üí Bal ‚Üí ‚Ñï ‚Üí Bal
x +‚ü® z ‚ü©+ y = right z + x ‚ü©‚ü® left z  + y

_+‚ü®‚ü©+_ : Bal ‚Üí Bal ‚Üí Bal
x +‚ü®‚ü©+ y = left x +‚ü® right x ‚ü©-‚ü® left y ‚ü©+ right y

mempty : Bal
mempty = 0 ‚ü©‚ü® 0

diff-zero ≥ : ‚àÄ n ‚Üí n ‚ü©-‚ü® zero ‚â° n ‚ü©‚ü® zero
diff-zero ≥ zero    = refl
diff-zero ≥ (suc n) = refl

invert : Bal ‚Üí Bal
invert (x ‚ü©‚ü® y) = y ‚ü©‚ü® x

diff-inv : ‚àÄ x y ‚Üí invert (x ‚ü©-‚ü® y) ‚â° y ‚ü©-‚ü® x
diff-inv zero  zero = refl
diff-inv zero (suc y) = refl
diff-inv (suc x) zero = refl
diff-inv (suc x) (suc y) = diff-inv x y

open import Path.Reasoning

add-inv : ‚àÄ x y ‚Üí (x +‚ü®‚ü©+ y) ‚â° invert (invert y +‚ü®‚ü©+ invert x)
add-inv (xl ‚ü©‚ü® xr) (yl ‚ü©‚ü® yr) = cong‚ÇÇ _‚ü©‚ü®_ (cong (_+ xl) (cong left (diff-inv xr yl))) (cong (_+ yr) (cong right (diff-inv xr yl)))

0+‚ü®‚ü© : ‚àÄ x ‚Üí mempty +‚ü®‚ü©+ x ‚â° x
0+‚ü®‚ü© (zero   ‚ü©‚ü® xr) i = zero ‚ü©‚ü® xr
0+‚ü®‚ü© (suc xl ‚ü©‚ü® xr) i = suc (‚Ñï.+-id ≥ xl i) ‚ü©‚ü® xr

‚ü®‚ü©+0 : ‚àÄ x ‚Üí x +‚ü®‚ü©+ mempty ‚â° x
‚ü®‚ü©+0 (xl ‚ü©‚ü® zero  ) i = xl ‚ü©‚ü® zero
‚ü®‚ü©+0 (xl ‚ü©‚ü® suc xr) i = xl ‚ü©‚ü® suc (‚Ñï.+-id ≥ xr i)

diff-sub : ‚àÄ x y ‚Üí left (x ‚ü©-‚ü® y) ‚â° x - y
diff-sub zero zero = refl
diff-sub zero (suc y) = refl
diff-sub (suc x) zero = refl
diff-sub (suc x) (suc y) = diff-sub x y

diff-sub ≥ : ‚àÄ x y ‚Üí right (x ‚ü©-‚ü® y) ‚â° y - x
diff-sub ≥ zero zero = refl
diff-sub ≥ zero (suc y) = refl
diff-sub ≥ (suc x) zero = refl
diff-sub ≥ (suc x) (suc y) = diff-sub ≥ x y

minus-plus : ‚àÄ x y z ‚Üí x - y - z ‚â° x - (y + z)
minus-plus x zero z = refl
minus-plus zero (suc y) zero = refl
minus-plus zero (suc y) (suc z) = refl
minus-plus (suc x) (suc y) z = minus-plus x y z

lhs‚Ä≥ : ‚àÄ zl xr yl yr ‚Üí (zl - ((xr - yl) + yr)) + (yl - xr) ‚â° ((zl - yr) + yl) - xr
lhs‚Ä≥ zl zero zero yr = refl
lhs‚Ä≥ zl zero (suc yl) yr = refl
lhs‚Ä≥ zl (suc xr) zero yr = ‚Ñï.+-id ≥ _ Õæ (cong (zl -_) (‚Ñï.+-comm (suc xr) yr) Õæ sym (minus-plus zl yr (suc xr))) Õæ sym (cong (_- suc xr) (‚Ñï.+-id ≥ (zl - yr)))
lhs‚Ä≥ zero (suc xr) (suc yl) zero = lhs‚Ä≥ zero xr yl zero
lhs‚Ä≥ zero (suc xr) (suc yl) (suc yr) = lhs‚Ä≥ zero xr yl (suc yr)
lhs‚Ä≥ (suc zl) (suc xr) (suc yl) zero = lhs‚Ä≥ (suc zl) xr yl zero Õæ cong (_- xr) (sym (‚Ñï.+-suc zl yl))
lhs‚Ä≥ (suc zl) (suc xr) (suc yl) (suc yr) = cong (_+ (yl - xr)) (cong (suc zl -_) (‚Ñï.+-suc (xr - yl) yr)) Õæ lhs‚Ä≥ zl (suc xr) (suc yl) yr

rhs‚Ä¥ : ‚àÄ x y z ‚Üí x + y - z ‚â° x - (z - y) + (y - z)
rhs‚Ä¥ zero zero zero = refl
rhs‚Ä¥ zero zero (suc z) = refl
rhs‚Ä¥ zero (suc y) zero = refl
rhs‚Ä¥ (suc x) zero zero = refl
rhs‚Ä¥ (suc x) (suc y) zero = refl
rhs‚Ä¥ zero (suc y) (suc z) = rhs‚Ä¥ zero y z
rhs‚Ä¥ (suc x) zero (suc z) = cong (_- z) (‚Ñï.+-id ≥ x) Õæ sym (‚Ñï.+-id ≥ (x - z))
rhs‚Ä¥ (suc x) (suc y) (suc z) = cong (_- z) (‚Ñï.+-suc x y) Õæ rhs‚Ä¥ (suc x) y z

rhs‚Ä≥ : ‚àÄ xr yl yr zl ‚Üí ((xr - yl) + yr) - zl ‚â° xr - (zl - yr + yl) + (yr - zl)
rhs‚Ä≥ (suc xr) (suc yl) yr zl = rhs‚Ä≥ xr yl yr zl Õæ cong (Œª zy ‚Üí suc xr - zy + (yr - zl)) (sym (‚Ñï.+-suc (zl - yr) yl))
rhs‚Ä≥ zero zero zero zero = refl
rhs‚Ä≥ zero zero zero (suc zl) = refl
rhs‚Ä≥ zero zero (suc yr) zero = refl
rhs‚Ä≥ zero zero (suc yr) (suc zl) = rhs‚Ä≥ zero zero yr zl
rhs‚Ä≥ zero (suc yl) zero zero = refl
rhs‚Ä≥ zero (suc yl) zero (suc zl) = refl
rhs‚Ä≥ zero (suc yl) (suc yr) zero = refl
rhs‚Ä≥ zero (suc yl) (suc yr) (suc zl) = rhs‚Ä≥ zero (suc yl) yr zl
rhs‚Ä≥ (suc xr) zero zero zero = refl
rhs‚Ä≥ (suc xr) zero (suc yr) zero = refl
rhs‚Ä≥ (suc xr) zero zero     (suc zl) = cong (_- zl) (‚Ñï.+-id ≥ xr) Õæ cong (xr -_) (sym (‚Ñï.+-id ≥ zl)) Õæ sym (‚Ñï.+-id ≥ (xr - (zl + zero)))
rhs‚Ä≥ (suc xr) zero (suc yr) (suc zl) = cong (_- zl) (‚Ñï.+-suc xr yr) Õæ  rhs‚Ä¥ (suc xr) yr zl Õæ sym (cong (Œª zy ‚Üí suc xr - zy + (yr - zl)) (‚Ñï.+-id ≥ (zl - yr)))

‚ü®‚ü©-assoc : Associative _+‚ü®‚ü©+_
‚ü®‚ü©-assoc (xl ‚ü©‚ü® xr ) (yl ‚ü©‚ü® yr ) (zl ‚ü©‚ü® zr) = cong‚ÇÇ _‚ü©‚ü®_ lhs rhs
  where

  lhs‚Ä≤ : ‚àÄ xr yl yr zl ‚Üí right (left (xr ‚ü©-‚ü® yl) + yr ‚ü©-‚ü® zl) + right (xr ‚ü©-‚ü® yl) ‚â° right (xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + yl)
  lhs‚Ä≤ xr yl yr zl =
    right (left (xr ‚ü©-‚ü® yl) + yr ‚ü©-‚ü® zl) + right (xr ‚ü©-‚ü® yl) ‚â°‚ü® cong‚ÇÇ _+_ (diff-sub ≥ (left (xr ‚ü©-‚ü® yl) + yr) zl) (diff-sub ≥ xr yl) ‚ü©
    (zl - (left (xr ‚ü©-‚ü® yl) + yr)) + (yl - xr) ‚â°‚ü® cong (Œª xy ‚Üí (zl - (xy + yr)) + (yl - xr)) (diff-sub xr yl) ‚ü©
    (zl - ((xr - yl) + yr)) + (yl - xr) ‚â°‚ü® lhs‚Ä≥ zl xr yl yr ‚ü©
    ((zl - yr) + yl) - xr ‚â°Àò‚ü® cong (Œª yz ‚Üí (yz + yl) - xr) (diff-sub ≥ yr zl) ‚ü©
    (right (yr ‚ü©-‚ü® zl) + yl) - xr ‚â°Àò‚ü® diff-sub ≥ xr _ ‚ü©
    right (xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + yl) ‚àé

  lhs : right (left (xr ‚ü©-‚ü® yl) + yr ‚ü©-‚ü® zl) + (right (xr ‚ü©-‚ü® yl) + xl) ‚â° right (xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + yl) + xl
  lhs = sym (‚Ñï.+-assoc _ (right (xr ‚ü©-‚ü® yl)) xl) Õæ cong (_+ xl) (lhs‚Ä≤ xr yl yr zl)

  rhs‚Ä≤ : ‚àÄ xr yl yr zl ‚Üí left (left (xr ‚ü©-‚ü® yl) + yr ‚ü©-‚ü® zl) ‚â° left (xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + yl) + left (yr ‚ü©-‚ü® zl)
  rhs‚Ä≤ xr yl yr zl =
    left (left (xr ‚ü©-‚ü® yl) + yr ‚ü©-‚ü® zl) ‚â°‚ü® diff-sub _ zl ‚ü©
    left (xr ‚ü©-‚ü® yl) + yr - zl ‚â°‚ü® cong (_- zl) (cong (_+ yr) (diff-sub xr yl)) ‚ü©
    (xr - yl) + yr - zl ‚â°‚ü® rhs‚Ä≥ xr yl yr zl ‚ü©
    (xr - ((zl - yr) + yl)) + (yr - zl) ‚â°Àò‚ü® cong (Œª yz ‚Üí (xr - (yz + yl)) + (yr - zl)) (diff-sub ≥ yr zl) ‚ü©
    (xr - (right (yr ‚ü©-‚ü® zl) + yl)) + (yr - zl) ‚â°Àò‚ü® cong‚ÇÇ _+_ (diff-sub xr _) (diff-sub yr zl) ‚ü©
    left (xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + yl) + left (yr ‚ü©-‚ü® zl) ‚àé

  rhs : left (left (xr ‚ü©-‚ü® yl) + yr ‚ü©-‚ü® zl) + zr ‚â° left (xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + yl) + (left (yr ‚ü©-‚ü® zl) + zr)
  rhs = cong (_+ zr) (rhs‚Ä≤ xr yl yr zl) Õæ ‚Ñï.+-assoc (left (xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + yl)) (left (yr ‚ü©-‚ü® zl)) zr

semigroupBal : Semigroup _
semigroupBal .Semigroup.ùëÜ = Bal
semigroupBal .Semigroup._‚àô_ = _+‚ü®‚ü©+_
semigroupBal .Semigroup.assoc = ‚ü®‚ü©-assoc

monoidBal : Monoid _
Monoid.ùëÜ monoidBal = Bal
Monoid._‚àô_ monoidBal = _+‚ü®‚ü©+_
Monoid.Œµ monoidBal = mempty
Monoid.assoc monoidBal = ‚ü®‚ü©-assoc
Monoid.Œµ‚àô monoidBal = 0+‚ü®‚ü©
Monoid.‚àôŒµ monoidBal = ‚ü®‚ü©+0
