{-# OPTIONS --allow-unsolved-metas #-}

module Control.Monad.Free.State where

open import Control.Monad.Free.Quotiented
open import Prelude hiding (‚ä§)
open import Data.Unit.UniversePolymorphic
open import Algebra
open import Data.List
open import Data.List.Syntax


private variable S : Type a

data StateF (S : Type a) (A : Type a)  : Type a where
  getF : (S ‚Üí A) ‚Üí StateF S A
  putF : S ‚Üí A ‚Üí StateF S A

put‚Ä≤ : S ‚Üí Syntax (StateF S) ‚ä§
put‚Ä≤ x = lift‚Ä≤ (putF x _)

_>>‚Ä≤_ : Syntax (StateF S) A ‚Üí Syntax (StateF S) B ‚Üí Syntax (StateF S) B
xs >>‚Ä≤ ys = xs >>=‚Ä≤ const ys

StateLaws : Theory (StateF S)
StateLaws {S = S} =
  ((S √ó S) , ‚ä§ , (Œª { (u , u‚Ä≤) ‚Üí (put‚Ä≤ u >>‚Ä≤ put‚Ä≤ u‚Ä≤) , (put‚Ä≤ u‚Ä≤) })) ‚à∑ []

State : Type a ‚Üí Type a ‚Üí Type _
State S = Free (StateF S) StateLaws

get : State A A
get = lift (getF id)

put : A ‚Üí State A ‚ä§
put x = lift (putF x _)

module _ {s} {S : Type s} where
  functorState : Functor s s
  functorState .Functor.ùêπ = StateF S
  functorState .Functor.map f (getF x) = getF (f ‚àò x)
  functorState .Functor.map f (putF s x) = putF s (f x)
  functorState .Functor.map-id i (getF x) = getF x
  functorState .Functor.map-id i (putF x x‚ÇÅ) = putF x x‚ÇÅ
  functorState .Functor.map-comp f g i (getF x) = getF (f ‚àò g ‚àò x)
  functorState .Functor.map-comp f g i (putF x x‚ÇÅ) = putF x (f (g x‚ÇÅ))

-- runState-alg : Œ¶ (StateF S) StateLaws Œª A ‚Üí S ‚Üí A √ó S
-- runState-alg .fst (liftF (getF k)) s = k s , s
-- runState-alg .fst (liftF (putF s‚ÇÇ k)) s‚ÇÅ = k , s‚ÇÇ
-- runState-alg .fst (returnF x) s = x , s
-- runState-alg .fst (bindF _ P‚ü®xs‚ü© _ P‚ü®‚àòk‚ü©) s = uncurry P‚ü®‚àòk‚ü© (P‚ü®xs‚ü© s)
-- runState-alg .snd .c-set = {!!}
-- runState-alg .snd .c->>=idÀ° isb f Pf x = refl
-- runState-alg .snd .c->>=id ≥ isa x Px = refl
-- runState-alg .snd .c->>=assoc isa xs Pxs f Pf g Pg = refl
-- runState-alg .snd .c-quot nothing iss e = refl

runState : State S A ‚Üí S ‚Üí A √ó S
runState = cata functorState {!!} _,_ œï lemma
  where
  œï : StateF S (S ‚Üí A √ó S) ‚Üí S ‚Üí A √ó S
  œï = (Œª { (getF k) s ‚Üí k s s ; (putF s‚ÇÇ k) s‚ÇÅ ‚Üí k s‚ÇÇ })

  lemma : InTheory functorState {!!} œï
  lemma nothing f iss e = refl

  -- lemma‚Ä≤ : ‚àÄ {T} ‚Üí (f : T ‚Üí (S ‚Üí A √ó S)) (xs ys : Syntax (StateF S) T) ‚Üí xs ‚âê ys ‚àà StateLaws ‚Üí ‚ü¶ act functorState {!!} œï ‚üß‚Üë xs f ‚â° ‚ü¶ act functorState {!!} œï ‚üß‚Üë ys f
  -- lemma‚Ä≤ f (lift‚Ä≤ x) ys (nothing , xs~ys) = let p = xs~ys in {!!}
  -- lemma‚Ä≤ f (return‚Ä≤ x) ys (nothing , xs~ys) = {!!}
  -- lemma‚Ä≤ f (xs >>=‚Ä≤ x) ys (nothing , xs~ys) = {!!}

-- open import Data.Nat using (_‚à∏_)

-- example : State ‚Ñï ‚Ñï
-- example = do
--   x ‚Üê get
--   put (suc x)
--   put x
--   return (x ‚à∏ 1)

-- res : ‚Ñï √ó ‚Ñï
-- res = runState example 5
