{-# OPTIONS --allow-unsolved-metas #-}

module Applicative where

open import Prelude
open import Algebra

module _ (mon : Monoid a) where
  open Monoid mon
  constApplicative : Applicative {‚Ñì‚ÇÅ = b} (const ùëÜ)
  constApplicative .Applicative.pure _ = Œµ
  constApplicative .Applicative._<*>_ = _‚àô_
  constApplicative .Applicative.pure-homo _ _ = Œµ‚àô _
  constApplicative .Applicative.<*>-interchange u _ = ‚àôŒµ u Õæ sym (Œµ‚àô _)
  constApplicative .Applicative.<*>-comp u v w = cong (Œª eu ‚Üí eu ‚àô v ‚àô w) (Œµ‚àô u) Õæ assoc _ _ _

idApplicative : Applicative {‚Ñì‚ÇÅ = a} id
idApplicative .Applicative.pure = id
idApplicative .Applicative._<*>_ = _$_
idApplicative .Applicative.pure-homo f x = refl
idApplicative .Applicative.<*>-interchange u y = refl
idApplicative .Applicative.<*>-comp u v w = refl


module _ {F : Type b ‚Üí Type c} {G : Type a ‚Üí Type b} (fa : Applicative F) (ga : Applicative G) where
  open Applicative ‚¶É ... ‚¶Ñ
  instance
    _ : Applicative F
    _ = fa

  instance
    _ : Applicative G
    _ = ga

  composeApplicative : Applicative (F ‚àò G)
  composeApplicative .Applicative.pure x = pure (pure x)
  composeApplicative .Applicative._<*>_ fs xs = ‚¶á fs <*> xs ‚¶à
  composeApplicative .Applicative.pure-homo f x = {!!}
  composeApplicative .Applicative.<*>-interchange u y = {!!}
  composeApplicative .Applicative.<*>-comp u v w = {!!}
