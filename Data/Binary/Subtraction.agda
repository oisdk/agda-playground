{-# OPTIONS --cubical --safe #-}

module Data.Binary.Subtraction where

open import Data.Binary.Definition
open import Data.Nat

double : ๐น โ ๐น
double 0แต      = 0แต
double (1แต xs) = 2แต double xs
double (2แต xs) = 2แต 1แต xs

dec : ๐น โ ๐น
dec 0แต = 0แต
dec (2แต xs) = 1แต xs
dec (1แต xs) = double xs

ones : โ โ ๐น โ ๐น
ones zero    xs = xs
ones (suc n) xs = ones n (1แต xs)

_ร2^suc_ : ๐น โ โ โ ๐น
0แต      ร2^suc n = 0แต
(1แต xs) ร2^suc n = 2แต ones n (double xs)
(2แต xs) ร2^suc n = 2แต ones (suc n) xs

mutual
  -- subโ x y = (x - (y + 1)) ร 2โฟ
  subโ : โ โ ๐น โ ๐น โ ๐น
  subโ zero xs      0แต      = dec xs
  subโ zero 0แต      _       = 1แต 0แต
  subโ zero (1แต xs) (1แต ys) = 1แต subโ 0 xs ys
  subโ zero (1แต xs) (2แต ys) = subโ 1 xs ys
  subโ zero (2แต xs) (1แต ys) = sub  1 xs ys
  subโ zero (2แต xs) (2แต ys) = 1แต subโ 0 xs ys
  subโ (suc n) 0แต      _       = 2แต ones n 0แต
  subโ (suc n) (1แต xs) 0แต      = xs ร2^suc suc n
  subโ (suc n) (2แต xs) 0แต      = 2แต ones n (double xs)
  subโ (suc n) (1แต xs) (1แต ys) = 2แต ones n (subโ 1 xs ys)
  subโ (suc n) (1แต xs) (2แต ys) = subโ (suc (suc n)) xs ys
  subโ (suc n) (2แต xs) (1แต ys) = sub  (suc (suc n)) xs ys
  subโ (suc n) (2แต xs) (2แต ys) = 2แต ones n (subโ 1 xs ys)

  -- sub n x y = (x - y) ร 2โฟ
  sub : โ โ ๐น โ ๐น โ ๐น
  sub zero 0แต      _       = 0แต
  sub (suc n) 0แต      _       = 0แต
  sub zero xs      0แต      = xs
  sub zero (1แต xs) (1แต ys) = sub 1 xs ys
  sub zero (1แต xs) (2แต ys) = 1แต subโ 0 xs ys
  sub zero (2แต xs) (1แต ys) = 1แต sub  0 xs ys
  sub zero (2แต xs) (2แต ys) = sub 1 xs ys
  sub (suc n) xs      0แต      = xs ร2^suc n
  sub (suc n) (1แต xs) (1แต ys) = sub (suc (suc n)) xs ys
  sub (suc n) (1แต xs) (2แต ys) = 2แต ones n (subโ 1 xs ys)
  sub (suc n) (2แต xs) (1แต ys) = 2แต ones n (sub  1 xs ys)
  sub (suc n) (2แต xs) (2แต ys) = sub (suc (suc n)) xs ys

open import Data.Binary.Order
open import Data.Bool

infixl 6 _-_
_-_ : ๐น โ ๐น โ ๐น
n - m = if n โคแดฎ m then 0แต else sub 0 n m


open import Level
open import Data.Binary.Testers
open import Data.Binary.Conversion.Fast.Strict
open import Path
open import Data.List using (List; _โฏ_)
open import Data.List.Sugar using (liftA2)

ร2-tester : ๐น โ โ โ ๐น
ร2-tester xs zero    = double xs
ร2-tester xs (suc n) = double (ร2-tester xs n)

test-exp : โ โ Type
test-exp n = let ns = 0 โฏ n in
  liftA2 (ฮป n m โ โฆ n โโง ร2^suc m) ns ns โก
  liftA2 (ฮป n m โ ร2-tester โฆ n โโง m) ns ns

_ : test-exp 30
_ = refl

_ : test _-_ _โธ_ 30
_ = refl
