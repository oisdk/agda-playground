{-# OPTIONS --cubical --safe #-}

module Data.Binary.Subtraction where

open import Data.Binary.Definition
open import Data.Nat

decโฒ : ๐น โ ๐น
dec : ๐น โ ๐น

decโฒ 0แต = 0แต
decโฒ (1แต xs) = 2แต decโฒ xs
decโฒ (2แต xs) = 2แต 1แต xs

dec 0แต = 0แต
dec (2แต xs) = 1แต xs
dec (1แต xs) = decโฒ xs

ones : โ โ ๐น โ ๐น
ones zero    xs = xs
ones (suc n) xs = ones n (1แต xs)

fromZโ : โ โ ๐น โ ๐น
fromZโ n 0แต      = 0แต
fromZโ n (1แต xs) = fromZโ (suc n) xs
fromZโ n (2แต xs) = 2แต ones n (fromZโ 0 xs)

fromZ : ๐น โ ๐น
fromZ 0แต = 0แต
fromZ (1แต xs) = fromZโ zero xs
fromZ (2แต xs) = 1แต fromZ xs

open import Data.Binary.Addition

mutual
  twosโ : ๐น โ ๐น
  twosโ 0แต      = 1แต 0แต
  twosโ (1แต xs) = 2แต twosโ xs
  twosโ (2แต xs) = 1แต twosโ xs

  twosโ : ๐น โ ๐น
  twosโ 0แต      = 2แต 0แต
  twosโ (1แต xs) = 1แต twosโ xs
  twosโ (2แต xs) = 2แต twosโ xs

mutual
  complโ : ๐น โ ๐น โ ๐น
  complโ 0แต      _       = 2แต 0แต
  complโ (1แต xs) 0แต      = 1แต twosโ xs
  complโ (2แต xs) 0แต      = 2แต twosโ xs
  complโ (1แต xs) (1แต ys) = 2แต complโ xs ys
  complโ (1แต xs) (2แต ys) = 1แต complโ xs ys
  complโ (2แต xs) (1แต ys) = 1แต complโ xs ys
  complโ (2แต xs) (2แต ys) = 2แต complโ xs ys

  complโ : ๐น โ ๐น โ ๐น
  complโ 0แต      _       = 1แต 1แต 0แต
  complโ (1แต xs) 0แต      = 2แต twosโ xs
  complโ (2แต xs) 0แต      = 1แต twosโ xs
  complโ (1แต xs) (1แต ys) = 1แต complโ xs ys
  complโ (1แต xs) (2แต ys) = 2แต complโ xs ys
  complโ (2แต xs) (1แต ys) = 2แต complโ xs ys
  complโ (2แต xs) (2แต ys) = 1แต complโ xs ys

open import Data.Binary.Order
open import Data.Bool

infixl 6 _-_
_-_ : ๐น โ ๐น โ ๐น
n - m = if n โคแดฎ m then 0แต else fromZ (complโ n m)

open import Data.Binary.Testers
open import Path using (refl)

_ : test _-_ _โธ_ 30
_ = refl
