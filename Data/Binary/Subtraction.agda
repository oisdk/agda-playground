{-# OPTIONS --cubical --safe #-}

module Data.Binary.Subtraction where

open import Data.Binary.Definition
open import Prelude

decโฒ : ๐น โ ๐น
dec : ๐น โ ๐น

decโฒ 0แต = 0แต
decโฒ (1แต xs) = 2แต decโฒ xs
decโฒ (2แต xs) = 2แต 1แต xs

dec 0แต = 0แต
dec (2แต xs) = 1แต xs
dec (1แต xs) = decโฒ xs

rโฒ : ๐น โ ๐น
rโฒ 0แต = 0แต
rโฒ (1แต xs) = 1แต xs
rโฒ (2แต xs) = 2แต (1แต xs)

rโณ : ๐น โ ๐น
rโณ 0แต = 0แต
rโณ (1แต xs) = 2แต xs
rโณ (2แต xs) = 2แต (2แต xs)

r : ๐น โ Maybe ๐น
r 0แต = nothing
r (1แต xs) = just xs
r (2แต xs) = just (2แต xs)

unzero : Maybe ๐น โ ๐น
unzero nothing = 0แต
unzero (just x) = x

map : (๐น โ ๐น) โ Maybe ๐น โ Maybe ๐น
map f nothing = nothing
map f (just x) = just (f x)

subโ : ๐น โ ๐น โ ๐น
subโ : ๐น โ ๐น โ ๐น

subโ 0แต         ys      = 0แต
subโ (1แต xs)    (1แต ys) = rโณ (subโ xs ys)
subโ (2แต xs)    (2แต ys) = rโณ (subโ xs ys)
subโ (1แต xs)    (2แต ys) = rโฒ (subโ xs ys)
subโ (2แต xs)    (1แต ys) = rโฒ (subโ xs ys)
subโ (1แต 0แต)    0แต      = 1แต 0แต
subโ (1แต 1แต xs) 0แต      = 2แต (1แต (decโฒ xs))
subโ (1แต 2แต xs) 0แต      = 2แต (1แต (1แต xs))
subโ (2แต xs)    0แต      = 2แต (decโฒ xs)

subโ 0แต      0แต      = 1แต 0แต
subโ 0แต      (1แต ys) = 0แต
subโ 0แต      (2แต ys) = 0แต
subโ (1แต xs) 0แต      = 2แต (decโฒ xs)
subโ (2แต xs) 0แต      = 2แต (1แต xs)
subโ (1แต xs) (1แต ys) = rโฒ (subโ xs ys)
subโ (2แต xs) (2แต ys) = rโฒ (subโ xs ys)
subโ (1แต xs) (2แต ys) = rโณ (subโ xs ys)
subโ (2แต xs) (1แต ys) = rโณ (subโ xs ys)

subโ : ๐น โ ๐น โ Maybe ๐น
subโ 0แต      ys      = nothing
subโ (1แต xs) 0แต      = just (decโฒ xs)
subโ (2แต xs) 0แต      = just (1แต xs)
subโ (1แต xs) (1แต ys) = map 1แต_ (subโ xs ys)
subโ (2แต xs) (2แต ys) = map 1แต_ (subโ xs ys)
subโ (1แต xs) (2แต ys) = r (subโ xs ys)
subโ (2แต xs) (1แต ys) = r (subโ xs ys)

subโ : ๐น โ ๐น โ Maybe ๐น
subโ xs      0แต      = just xs
subโ 0แต      (1แต ys) = nothing
subโ 0แต      (2แต ys) = nothing
subโ (1แต xs) (1แต ys) = r (subโ xs ys)
subโ (2แต xs) (2แต ys) = r (subโ xs ys)
subโ (2แต xs) (1แต ys) = map 1แต_ (subโ xs ys)
subโ (1แต xs) (2แต ys) = map 1แต_ (subโ xs ys)

infixl 6 _-_
_-_ : ๐น โ ๐น โ ๐น
xs - ys = unzero (subโ xs ys)

open import Data.Binary.Testers
import Data.Nat as โ
open import Prelude

_ : test _-_ โ._โธ_ 30
_ = refl
