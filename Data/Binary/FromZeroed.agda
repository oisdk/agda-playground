{-# OPTIONS --cubical --safe #-}

module Data.Binary.FromZeroed where

open import Data.Binary.Definition
open import Prelude

inc-z : ๐น โ ๐น
inc-z 0แต = 2แต 0แต
inc-z (1แต xs) = 2แต xs
inc-z (2แต xs) = 1แต inc-z xs

toZ : ๐น โ ๐น
toZ 0แต = 0แต
toZ (1แต xs) = 2แต toZ xs
toZ (2แต xs) = 1แต inc-z (toZ xs)

ones : โ โ ๐น โ ๐น
ones zero    xs = xs
ones (suc n) xs = 1แต ones n xs

fromZโ : โ โ ๐น โ ๐น
fromZโ n 0แต      = 0แต
fromZโ n (1แต xs) = fromZโ (suc n) xs
fromZโ n (2แต xs) = 2แต ones n (fromZโ 0 xs)

fromZ : ๐น โ ๐น
fromZ 0แต = 0แต
fromZ (1แต xs) = fromZโ zero xs
fromZ (2แต xs) = 1แต fromZ xs

import Data.Binary.Conversion.Fast as Fast

open import Data.List using (List; _โฏ_; map)

round-trip : โ โ Type
round-trip n = map (fromZ โ toZ) nums โก nums
  where
  nums : List ๐น
  nums = map Fast.โฆ_โโง (0 โฏ n)

_ : round-trip 300
_ = refl
