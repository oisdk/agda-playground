{-# OPTIONS --cubical --safe --postfix-projections #-}

module Data.Binary.Isomorphism where

open import Data.Binary.Definition
open import Data.Binary.Conversion
open import Data.Binary.Increment
open import Prelude
import Data.Nat as РёЋ

inc-suc : Рѕђ x Рєњ РЪд inc x РЄЊРЪД РЅА suc РЪд x РЄЊРЪД
inc-suc []      i = 1
inc-suc (1рхЄРѕи x) i = РЪд 2рхЄРѕи x РЄЊРЪД
inc-suc (2рхЄРѕи x) i = suc (inc-suc x i РёЋ.* 2)

inc-2*-1рхЄРѕи : Рѕђ n Рєњ inc РЪд n РёЋ.* 2 РЄЉРЪД РЅА 1рхЄРѕи РЪд n РЄЉРЪД
inc-2*-1рхЄРѕи zero    i = 1рхЄРѕи []
inc-2*-1рхЄРѕи (suc n) i = inc (inc (inc-2*-1рхЄРѕи n i))

­Юћ╣-rightInv : Рѕђ x Рєњ РЪд РЪд x РЄЉРЪД РЄЊРЪД РЅА x
­Юћ╣-rightInv zero    = refl
­Юћ╣-rightInv (suc x) = inc-suc РЪд x РЄЉРЪД ═Й cong suc (­Юћ╣-rightInv x)

­Юћ╣-leftInv : Рѕђ x Рєњ РЪд РЪд x РЄЊРЪД РЄЉРЪД РЅА x
­Юћ╣-leftInv [] = refl
­Юћ╣-leftInv (1рхЄРѕи x) = inc-2*-1рхЄРѕи РЪд x РЄЊРЪД ═Й cong 1рхЄРѕи_ (­Юћ╣-leftInv x)
­Юћ╣-leftInv (2рхЄРѕи x) = cong inc (inc-2*-1рхЄРѕи РЪд x РЄЊРЪД) ═Й cong 2рхЄРѕи_ (­Юћ╣-leftInv x)

­Юћ╣РЄћРёЋ : ­Юћ╣ РЄћ РёЋ
­Юћ╣РЄћРёЋ .fun = РЪд_РЄЊРЪД
­Юћ╣РЄћРёЋ .inv = РЪд_РЄЉРЪД
­Юћ╣РЄћРёЋ .rightInv = ­Юћ╣-rightInv
­Юћ╣РЄћРёЋ .leftInv  = ­Юћ╣-leftInv
