{-# OPTIONS --cubical --safe --postfix-projections #-}

module Data.Binary.Isomorphism where

open import Data.Binary.Definition
open import Data.Binary.Conversion
open import Data.Binary.Increment
open import Prelude
import Data.Nat as РёЋ

inc-suc : Рѕђ x Рєњ РЪд inc x РЄЊРЪД РЅА suc РЪд x РЄЊРЪД
inc-suc 0рхЄ     i = 1
inc-suc (1рхЄ x) i = 2 РёЋ.+ РЪд x РЄЊРЪД РёЋ.* 2
inc-suc (2рхЄ x) i = suc (inc-suc x i РёЋ.* 2)

inc-2*-1рхЄ : Рѕђ n Рєњ inc РЪд n РёЋ.* 2 РЄЉРЪД РЅА 1рхЄ РЪд n РЄЉРЪД
inc-2*-1рхЄ zero    i = 1рхЄ 0рхЄ
inc-2*-1рхЄ (suc n) i = inc (inc (inc-2*-1рхЄ n i))

­Юћ╣-rightInv : Рѕђ x Рєњ РЪд РЪд x РЄЉРЪД РЄЊРЪД РЅА x
­Юћ╣-rightInv zero    = refl
­Юћ╣-rightInv (suc x) = inc-suc РЪд x РЄЉРЪД ═Й cong suc (­Юћ╣-rightInv x)

­Юћ╣-leftInv : Рѕђ x Рєњ РЪд РЪд x РЄЊРЪД РЄЉРЪД РЅА x
­Юћ╣-leftInv 0рхЄ = refl
­Юћ╣-leftInv (1рхЄ x) =           inc-2*-1рхЄ РЪд x РЄЊРЪД  ═Й cong 1рхЄ_ (­Юћ╣-leftInv x)
­Юћ╣-leftInv (2рхЄ x) = cong inc (inc-2*-1рхЄ РЪд x РЄЊРЪД) ═Й cong 2рхЄ_ (­Юћ╣-leftInv x)

­Юћ╣РЄћРёЋ : ­Юћ╣ РЄћ РёЋ
­Юћ╣РЄћРёЋ .fun = РЪд_РЄЊРЪД
­Юћ╣РЄћРёЋ .inv = РЪд_РЄЉРЪД
­Юћ╣РЄћРёЋ .rightInv = ­Юћ╣-rightInv
­Юћ╣РЄћРёЋ .leftInv  = ­Юћ╣-leftInv
