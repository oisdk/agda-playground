{-# OPTIONS --cubical --safe #-}

module Data.Binary.Equatable where

open import Prelude
open import Data.Binary.Definition

infix 4 _‚â°·¥Æ_
_‚â°·¥Æ_ : ùîπ ‚Üí ùîπ ‚Üí Bool
[]       ‚â°·¥Æ []       = true
[]       ‚â°·¥Æ (1·µá‚à∑ ys) = false
[]       ‚â°·¥Æ (2·µá‚à∑ ys) = false
(1·µá‚à∑ xs) ‚â°·¥Æ []       = false
(1·µá‚à∑ xs) ‚â°·¥Æ (1·µá‚à∑ ys) = xs ‚â°·¥Æ ys
(1·µá‚à∑ xs) ‚â°·¥Æ (2·µá‚à∑ ys) = false
(2·µá‚à∑ xs) ‚â°·¥Æ []       = false
(2·µá‚à∑ xs) ‚â°·¥Æ (1·µá‚à∑ ys) = false
(2·µá‚à∑ xs) ‚â°·¥Æ (2·µá‚à∑ ys) = xs ‚â°·¥Æ ys

‚â°·¥Æ‚áí‚â° : ‚àÄ xs ys ‚Üí T (xs ‚â°·¥Æ ys) ‚Üí xs ‚â° ys
‚â°·¥Æ‚áí‚â° []       []       xs‚â°ys i = []
‚â°·¥Æ‚áí‚â° (1·µá‚à∑ xs) (1·µá‚à∑ ys) xs‚â°ys i = 1·µá‚à∑ ‚â°·¥Æ‚áí‚â° xs ys xs‚â°ys i
‚â°·¥Æ‚áí‚â° (2·µá‚à∑ xs) (2·µá‚à∑ ys) xs‚â°ys i = 2·µá‚à∑ ‚â°·¥Æ‚áí‚â° xs ys xs‚â°ys i

‚â°‚áí‚â°·¥Æ : ‚àÄ xs ys ‚Üí xs ‚â° ys ‚Üí T (xs ‚â°·¥Æ ys)
‚â°‚áí‚â°·¥Æ xs ys p = subst (Œª z ‚Üí T (xs ‚â°·¥Æ z)) p (go xs)
  where
  go : ‚àÄ xs ‚Üí T (xs ‚â°·¥Æ xs)
  go [] = tt
  go (1·µá‚à∑ xs) = go xs
  go (2·µá‚à∑ xs) = go xs

_‚âü_ : Discrete ùîπ
xs ‚âü ys = ‚ü¶yes ‚â°·¥Æ‚áí‚â° xs ys ,no ‚â°‚áí‚â°·¥Æ xs ys ‚üß (from-bool (xs ‚â°·¥Æ ys))

