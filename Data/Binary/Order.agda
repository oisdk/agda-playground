{-# OPTIONS --cubical --safe #-}

module Data.Binary.Order where

open import Prelude
open import Data.Binary.Definition

infix 4 _‚â≤·¥Æ_&_
_‚â≤·¥Æ_&_ : ùîπ ‚Üí ùîπ ‚Üí Bool ‚Üí Bool
0·µá    ‚â≤·¥Æ ys    & true  = true
0·µá    ‚â≤·¥Æ 0·µá    & false = false
0·µá    ‚â≤·¥Æ 1·µá ys & false = true
0·µá    ‚â≤·¥Æ 2·µá ys & false = true
1·µá xs ‚â≤·¥Æ 0·µá    & s     = false
1·µá xs ‚â≤·¥Æ 1·µá ys & s     = xs ‚â≤·¥Æ ys & s
1·µá xs ‚â≤·¥Æ 2·µá ys & s     = xs ‚â≤·¥Æ ys & true
2·µá xs ‚â≤·¥Æ 0·µá    & s     = false
2·µá xs ‚â≤·¥Æ 1·µá ys & s     = xs ‚â≤·¥Æ ys & false
2·µá xs ‚â≤·¥Æ 2·µá ys & s     = xs ‚â≤·¥Æ ys & s

infix 4 _‚â§·¥Æ_ _<·¥Æ_
_‚â§·¥Æ_ : ùîπ ‚Üí ùîπ ‚Üí Bool
xs ‚â§·¥Æ ys = xs ‚â≤·¥Æ ys & true

_<·¥Æ_ : ùîπ ‚Üí ùîπ ‚Üí Bool
xs <·¥Æ ys = xs ‚â≤·¥Æ ys & false

infix 4 _‚â§_ _<_
_‚â§_ : ùîπ ‚Üí ùîπ ‚Üí Type
xs ‚â§ ys = T (xs ‚â§·¥Æ ys)

_<_ : ùîπ ‚Üí ùîπ ‚Üí Type
xs < ys = T (xs <·¥Æ ys)
