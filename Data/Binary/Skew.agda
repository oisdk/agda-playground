{-# OPTIONS --cubical --safe --postfix-projections #-}

module Data.Binary.Skew where

open import Prelude
open import Data.Nat
open import Data.List

๐น : Type
๐น = List โ

inc : ๐น โ ๐น
inc [] = zero โท []
inc (x โท []) = zero โท x โท []
inc (xโ โท zero   โท xs) = suc xโ โท xs
inc (xโ โท suc xโ โท xs) = zero โท xโ โท xโ โท xs

โฆ_โโง : โ โ ๐น
โฆ zero โโง = []
โฆ suc n โโง = inc โฆ n โโง

skew : โ โ โ
skew n = suc (n + n)

w : โ โ โ โ โ
w zero    a = a
w (suc n) a = skew (w n a)

โฆ_โท_โโง^ : โ โ (โ โ โ) โ โ โ โ
โฆ x โท xs โโง^ a = let aโฒ = w x a in aโฒ + xs (skew aโฒ)

โฆ_โโง : ๐น โ โ
โฆ [] โโง = zero
โฆ x โท xs โโง = let a = w x 1 in a + foldr โฆ_โท_โโง^ (const zero) xs a

-- open import Path.Reasoning
-- import Data.Nat.Properties as โ

-- inc-suc : โ x โ โฆ inc x โโง โก suc โฆ x โโง
-- inc-suc [] = refl
-- inc-suc (x  โท []) = refl
-- inc-suc (x  โท zero   โท xs) = cong suc (โ.+-assoc (w x 1) (w x 1) _)
-- inc-suc (xโ โท suc xโ โท xs) = cong suc (cong (w xโ 1 +_) {!!})

-- ๐น-rightInv : โ x โ โฆ โฆ x โโง โโง โก x
-- ๐น-rightInv zero = refl
-- ๐น-rightInv (suc x) = {!!}

-- ๐น-leftInv : โ x โ โฆ โฆ x โโง โโง โก x
-- ๐น-leftInv [] = refl
-- ๐น-leftInv (x โท xs) = {!!}

-- ๐นโโ : ๐น โ โ
-- ๐นโโ .fun = โฆ_โโง
-- ๐นโโ .inv = โฆ_โโง
-- ๐นโโ .rightInv x = {!!}
-- ๐นโโ .leftInv = {!!}
