{-# OPTIONS --cubical --safe #-}

module Data.Binary.Base where

open import Prelude
import Data.Nat as โ

infixr 5 1แตโท_ 2แตโท_
data ๐น : Typeโ where
  [] : ๐น
  1แตโท_ : ๐น โ ๐น
  2แตโท_ : ๐น โ ๐น


inc : ๐น โ ๐น
inc [] = 1แตโท []
inc (1แตโท xs) = 2แตโท xs
inc (2แตโท xs) = 1แตโท inc xs

โฆ_โโง : โ โ ๐น
โฆ zero  โโง = []
โฆ suc n โโง = inc โฆ n โโง

โฆ_โโง : ๐น โ โ
โฆ [] โโง = 0
โฆ 1แตโท xs โโง = 1 โ.+ โฆ xs โโง โ.* 2
โฆ 2แตโท xs โโง = 2 โ.+ โฆ xs โโง โ.* 2

addโ : ๐น โ ๐น โ ๐น
addโ : ๐น โ ๐น โ ๐น

addโ [] ys = inc ys
addโ xs [] = inc xs
addโ (1แตโท xs) (1แตโท ys) = 1แตโท addโ xs ys
addโ (1แตโท xs) (2แตโท ys) = 2แตโท addโ xs ys
addโ (2แตโท xs) (1แตโท ys) = 2แตโท addโ xs ys
addโ (2แตโท xs) (2แตโท ys) = 1แตโท addโ xs ys

addโ [] [] = 2แตโท []
addโ [] (1แตโท ys) = 1แตโท inc ys
addโ [] (2แตโท ys) = 2แตโท inc ys
addโ (1แตโท xs) [] = 1แตโท inc xs
addโ (2แตโท xs) [] = 2แตโท inc xs
addโ (1แตโท xs) (1แตโท ys) = 2แตโท addโ xs ys
addโ (1แตโท xs) (2แตโท ys) = 1แตโท addโ xs ys
addโ (2แตโท xs) (1แตโท ys) = 1แตโท addโ xs ys
addโ (2แตโท xs) (2แตโท ys) = 2แตโท addโ xs ys

infixl 6 _+_
_+_ : ๐น โ ๐น โ ๐น
[] + ys = ys
xs + [] = xs
(1แตโท xs) + (1แตโท ys) = 2แตโท xs + ys
(1แตโท xs) + (2แตโท ys) = 1แตโท addโ xs ys
(2แตโท xs) + (1แตโท ys) = 1แตโท addโ xs ys
(2แตโท xs) + (2แตโท ys) = 2แตโท addโ xs ys

double : ๐น โ ๐น
double [] = []
double (1แตโท xs) = 2แตโท double xs
double (2แตโท xs) = 2แตโท 1แตโท xs

infixl 7 _*_
_*_ : ๐น โ ๐น โ ๐น
xs * [] = []
xs * (1แตโท ys) = go xs
  where
  go : ๐น โ ๐น
  go [] = []
  go (1แตโท xs) = 1แตโท ys + go xs
  go (2แตโท xs) = 2แตโท double ys + go xs
xs * (2แตโท ys) = go xs
  where
  go : ๐น โ ๐น
  go [] = []
  go (1แตโท xs) = 2แตโท ys + go xs
  go (2แตโท xs) = 2แตโท (1แตโท ys) + go xs

decโฒ : ๐น โ ๐น
dec : ๐น โ ๐น

decโฒ [] = []
decโฒ (1แตโท xs) = 2แตโท decโฒ xs
decโฒ (2แตโท xs) = 2แตโท 1แตโท xs

dec [] = []
dec (2แตโท xs) = 1แตโท xs
dec (1แตโท xs) = decโฒ xs

subโ : (๐น โ ๐น) โ (๐น โ ๐น) โ ๐น โ ๐น โ ๐น
subโ : (๐น โ ๐น) โ (๐น โ ๐น) โ ๐น โ ๐น โ ๐น

subโ o k []           ys       = []
subโ o k (1แตโท xs)     (1แตโท ys) = subโ (o โ k) 2แตโท_ xs ys
subโ o k (2แตโท xs)     (2แตโท ys) = subโ (o โ k) 2แตโท_ xs ys
subโ o k (1แตโท xs)     (2แตโท ys) = subโ o (k โ 1แตโท_) xs ys
subโ o k (2แตโท xs)     (1แตโท ys) = subโ o (k โ 1แตโท_) xs ys
subโ o k (1แตโท [])     []       = o []
subโ o k (1แตโท 1แตโท xs) []       = o (k (1แตโท (decโฒ xs)))
subโ o k (1แตโท 2แตโท xs) []       = o (k (1แตโท (1แตโท xs)))
subโ o k (2แตโท xs)     []       = o (k (decโฒ xs))

subโ o k []       []       = o []
subโ o k []       (1แตโท ys) = []
subโ o k []       (2แตโท ys) = []
subโ o k (1แตโท xs) []       = o (k (decโฒ xs))
subโ o k (2แตโท xs) []       = o (k (1แตโท xs))
subโ o k (1แตโท xs) (1แตโท ys) = subโ o (k โ 1แตโท_) xs ys
subโ o k (2แตโท xs) (2แตโท ys) = subโ o (k โ 1แตโท_) xs ys
subโ o k (1แตโท xs) (2แตโท ys) = subโ (o โ k) 2แตโท_ xs ys
subโ o k (2แตโท xs) (1แตโท ys) = subโ (o โ k) 2แตโท_ xs ys

subโ : (๐น โ ๐น) โ ๐น โ ๐น โ ๐น
subโ k []       ys       = []
subโ k (1แตโท xs) []       = k (decโฒ xs)
subโ k (2แตโท xs) []       = k (1แตโท xs)
subโ k (1แตโท xs) (1แตโท ys) = subโ (1แตโท_ โ k) xs ys
subโ k (2แตโท xs) (2แตโท ys) = subโ (1แตโท_ โ k) xs ys
subโ k (1แตโท xs) (2แตโท ys) = subโ k 2แตโท_ xs ys
subโ k (2แตโท xs) (1แตโท ys) = subโ k 2แตโท_ xs ys

subโ : (๐น โ ๐น) โ ๐น โ ๐น โ ๐น
subโ k  xs      []       = k xs
subโ k []       (1แตโท ys) = []
subโ k []       (2แตโท ys) = []
subโ k (1แตโท xs) (1แตโท ys) = subโ k 2แตโท_ xs ys
subโ k (2แตโท xs) (2แตโท ys) = subโ k 2แตโท_ xs ys
subโ k (2แตโท xs) (1แตโท ys) = subโ (1แตโท_ โ k) xs ys
subโ k (1แตโท xs) (2แตโท ys) = subโ (1แตโท_ โ k) xs ys

infixl 6 _-_
_-_ : ๐น โ ๐น โ ๐น
_-_ = subโ id

_โกแต_ : ๐น โ ๐น โ Bool
[] โกแต [] = true
[] โกแต (1แตโท ys) = false
[] โกแต (2แตโท ys) = false
(1แตโท xs) โกแต [] = false
(1แตโท xs) โกแต (1แตโท ys) = xs โกแต ys
(1แตโท xs) โกแต (2แตโท ys) = false
(2แตโท xs) โกแต [] = false
(2แตโท xs) โกแต (1แตโท ys) = false
(2แตโท xs) โกแต (2แตโท ys) = xs โกแต ys

-- testers : โ โ Typeโ
-- testers n = bins n n โก nats n n
--   where
--   open import Data.List
--   open import Data.List.Syntax
--   open import Data.List.Sugar
--   import Agda.Builtin.Nat as Nat

--   upTo : (โ โ A) โ โ โ List A
--   upTo f zero = []
--   upTo f (suc n) = f zero List.โท upTo (f โ suc) n

--   bins : โ โ โ โ List ๐น
--   bins ns ms = do
--     n โ upTo id ns
--     m โ upTo id ms
--     pure (โฆ n โโง - โฆ m โโง)

--   nats : โ โ โ โ List ๐น
--   nats ns ms = do
--     n โ upTo id ns
--     m โ upTo id ms
--     pure โฆ n Nat.- m โโง

-- _ : testers 100
-- _ = refl
