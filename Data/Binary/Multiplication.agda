{-# OPTIONS --cubical --safe #-}

module Data.Binary.Multiplication where

open import Data.Binary.Definition
open import Data.Binary.Addition

double : ๐น โ ๐น
double [] = []
double (1แตโท xs) = 2แตโท double xs
double (2แตโท xs) = 2แตโท 1แตโท xs

infixl 7 _*_
_*_ : ๐น โ ๐น โ ๐น
xs * [] = []
xs * (1แตโท ys) = go xs
  where
  ys2 = double ys

  go : ๐น โ ๐น
  go [] = []
  go (1แตโท xs) = 1แตโท ys + go xs
  go (2แตโท xs) = 2แตโท (ys2 + go xs)

xs * (2แตโท ys) = go xs
  where
  go : ๐น โ ๐น
  go [] = []
  go (1แตโท xs) = 2แตโท ys + go xs
  go (2แตโท xs) = 2แตโท (1แตโท ys) + go xs



-- open import Prelude
-- open import Data.Binary.Conversion

-- testers : โ โ Typeโ
-- testers n = bins n n โก nats n n
--   where
--   open import Data.List
--   open import Data.List.Syntax
--   open import Data.List.Sugar
--   import Agda.Builtin.Nat as Nat

--   upTo : (โ โ A) โ โ โ List A
--   upTo f zero = []
--   upTo f (suc n) = f zero List.โท upTo (f โ suc) n

--   bins : โ โ โ โ List ๐น
--   bins ns ms = do
--     n โ upTo id ns
--     m โ upTo id ms
--     pure (โฆ n โโง * โฆ m โโง)

--   nats : โ โ โ โ List ๐น
--   nats ns ms = do
--     n โ upTo id ns
--     m โ upTo id ms
--     pure โฆ n Nat.* m โโง

-- _ : testers 10
-- _ = refl
