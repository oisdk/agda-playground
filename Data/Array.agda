{-# OPTIONS --cubical --safe --postfix-projections #-}

module Data.Array where

open import Data.Binary
open import Prelude

private
  variable
    ns : ùîπ

record 2√ó {a} (A : Type a) : Type a where
  constructor _‚äõ_
  field
    pr‚ÇÅ pr‚ÇÇ : A
open 2√ó public

infixr 5 _‚à∑‚ÇÅ_ _‚à∑‚ÇÇ_ _‚à∑_

mutual
  record Array0·µá {a} : Type a where
    constructor []

  record Array1·µá {a} (A : Type a) (ns : ùîπ) : Type a where
    inductive
    constructor _‚à∑‚ÇÅ_
    field
      head1·µá : A
      tail1·µá : Array (2√ó A) ns

  record Array2·µá {a} (A : Type a) (ns : ùîπ) : Type a where
    inductive
    constructor _‚à∑‚ÇÇ_
    field
      head2·µá : 2√ó A
      tail2·µá : Array (2√ó A) ns

  Array : Type a ‚Üí ùîπ ‚Üí Type a
  Array A 0·µá = Array0·µá
  Array A (1·µá ns) = Array1·µá A ns
  Array A (2·µá ns) = Array2·µá A ns

_‚à∑_ : A ‚Üí Array A ns ‚Üí Array A (inc ns)
_‚à∑_ {ns = 0·µá} x xs = x ‚à∑‚ÇÅ xs
_‚à∑_ {ns = 1·µá ns} x‚ÇÅ (x‚ÇÇ ‚à∑‚ÇÅ xs) = (x‚ÇÅ ‚äõ x‚ÇÇ) ‚à∑‚ÇÇ xs
_‚à∑_ {ns = 2·µá ns} x‚ÇÅ (x‚ÇÇ ‚à∑‚ÇÇ xs) = x‚ÇÅ ‚à∑‚ÇÅ x‚ÇÇ ‚à∑ xs

open import Lens

‚¶Öhead1·µá‚¶Ü : Lens (Array A (1·µá ns)) A
‚¶Öhead1·µá‚¶Ü .into (x ‚à∑‚ÇÅ xs) = lens-part x (_‚à∑‚ÇÅ xs)
‚¶Öhead1·µá‚¶Ü .get-set (x ‚à∑‚ÇÅ xs) v i = v
‚¶Öhead1·µá‚¶Ü .set-get (x ‚à∑‚ÇÅ xs) i = x ‚à∑‚ÇÅ xs
‚¶Öhead1·µá‚¶Ü .set-set (x ‚à∑‚ÇÅ xs) v‚ÇÅ v‚ÇÇ i = v‚ÇÇ ‚à∑‚ÇÅ xs

‚¶Öhead2·µá‚¶Ü : Lens (Array A (2·µá ns)) (2√ó A)
‚¶Öhead2·µá‚¶Ü .into (x ‚à∑‚ÇÇ xs) = lens-part x (_‚à∑‚ÇÇ xs)
‚¶Öhead2·µá‚¶Ü .get-set (x ‚à∑‚ÇÇ xs) v i = v
‚¶Öhead2·µá‚¶Ü .set-get (x ‚à∑‚ÇÇ xs) i = x ‚à∑‚ÇÇ xs
‚¶Öhead2·µá‚¶Ü .set-set (x ‚à∑‚ÇÇ xs) v‚ÇÅ v‚ÇÇ i = v‚ÇÇ ‚à∑‚ÇÇ xs

‚¶Ötail1·µá‚¶Ü : Lens (Array A (1·µá ns)) (Array (2√ó A) ns)
‚¶Ötail1·µá‚¶Ü .into (x ‚à∑‚ÇÅ xs) = lens-part xs (x ‚à∑‚ÇÅ_)
‚¶Ötail1·µá‚¶Ü .get-set (x ‚à∑‚ÇÅ xs) v i = v
‚¶Ötail1·µá‚¶Ü .set-get (x ‚à∑‚ÇÅ xs) i = x ‚à∑‚ÇÅ xs
‚¶Ötail1·µá‚¶Ü .set-set (x ‚à∑‚ÇÅ xs) v‚ÇÅ v‚ÇÇ i = x ‚à∑‚ÇÅ v‚ÇÇ

‚¶Ötail2·µá‚¶Ü : Lens (Array A (2·µá ns)) (Array (2√ó A) ns)
‚¶Ötail2·µá‚¶Ü .into (x ‚à∑‚ÇÇ xs) = lens-part xs (x ‚à∑‚ÇÇ_)
‚¶Ötail2·µá‚¶Ü .get-set (x ‚à∑‚ÇÇ xs) v i = v
‚¶Ötail2·µá‚¶Ü .set-get (x ‚à∑‚ÇÇ xs) i = x ‚à∑‚ÇÇ xs
‚¶Ötail2·µá‚¶Ü .set-set (x ‚à∑‚ÇÇ xs) v‚ÇÅ v‚ÇÇ i = x ‚à∑‚ÇÇ v‚ÇÇ

‚¶Öpr‚ÇÅ‚¶Ü : Lens (2√ó A) A
‚¶Öpr‚ÇÅ‚¶Ü .into (x ‚äõ y) = lens-part x (_‚äõ y)
‚¶Öpr‚ÇÅ‚¶Ü .get-set s v i = v
‚¶Öpr‚ÇÅ‚¶Ü .set-get s i = s
‚¶Öpr‚ÇÅ‚¶Ü .set-set s v‚ÇÅ v‚ÇÇ i = v‚ÇÇ ‚äõ s .pr‚ÇÇ

‚¶Öpr‚ÇÇ‚¶Ü : Lens (2√ó A) A
‚¶Öpr‚ÇÇ‚¶Ü .into (x ‚äõ y) = lens-part y (x ‚äõ_)
‚¶Öpr‚ÇÇ‚¶Ü .get-set s v i = v
‚¶Öpr‚ÇÇ‚¶Ü .set-get s i = s
‚¶Öpr‚ÇÇ‚¶Ü .set-set s v‚ÇÅ v‚ÇÇ i = s .pr‚ÇÅ ‚äõ v‚ÇÇ

open import Data.Binary.Order

mutual
  index : ‚àÄ is {js} ‚Üí is < js ‚Üí Lens (Array A js) A
  index 0·µá      {1·µá js} p = ‚¶Öhead1·µá‚¶Ü
  index 0·µá      {2·µá js} p = ‚¶Öhead2·µá‚¶Ü ‚ãØ ‚¶Öpr‚ÇÅ‚¶Ü
  index (1·µá is) {js}    p = ind‚ÇÇ1·µá is p
  index (2·µá is) {1·µá js} p = ‚¶Ötail1·µá‚¶Ü ‚ãØ index is p ‚ãØ ‚¶Öpr‚ÇÇ‚¶Ü
  index (2·µá is) {2·µá js} p = ‚¶Ötail2·µá‚¶Ü ‚ãØ index is p ‚ãØ ‚¶Öpr‚ÇÅ‚¶Ü

  ind‚ÇÇ1·µá : ‚àÄ is {js} ‚Üí 1·µá is < js ‚Üí Lens (Array A js) A
  ind‚ÇÇ1·µá is      {1·µá js} p = ‚¶Ötail1·µá‚¶Ü ‚ãØ index is p ‚ãØ ‚¶Öpr‚ÇÅ‚¶Ü
  ind‚ÇÇ1·µá 0·µá      {2·µá js} p = ‚¶Öhead2·µá‚¶Ü ‚ãØ ‚¶Öpr‚ÇÇ‚¶Ü
  ind‚ÇÇ1·µá (1·µá is) {2·µá js} p = ‚¶Ötail2·µá‚¶Ü ‚ãØ ind‚ÇÉ is p ‚ãØ ‚¶Öpr‚ÇÇ‚¶Ü
  ind‚ÇÇ1·µá (2·µá is) {2·µá js} p = ‚¶Ötail2·µá‚¶Ü ‚ãØ ind‚ÇÇ2·µá is p ‚ãØ ‚¶Öpr‚ÇÇ‚¶Ü

  ind‚ÇÇ2·µá : ‚àÄ is {js} ‚Üí 2·µá is ‚â§ js ‚Üí Lens (Array A js) A
  ind‚ÇÇ2·µá is      {1·µá js} p = ‚¶Ötail1·µá‚¶Ü ‚ãØ index is p ‚ãØ ‚¶Öpr‚ÇÅ‚¶Ü
  ind‚ÇÇ2·µá 0·µá      {2·µá js} p = ‚¶Öhead2·µá‚¶Ü ‚ãØ ‚¶Öpr‚ÇÇ‚¶Ü
  ind‚ÇÇ2·µá (1·µá is) {2·µá js} p = ‚¶Ötail2·µá‚¶Ü ‚ãØ ind‚ÇÉ is p ‚ãØ ‚¶Öpr‚ÇÇ‚¶Ü
  ind‚ÇÇ2·µá (2·µá is) {2·µá js} p = ‚¶Ötail2·µá‚¶Ü ‚ãØ ind‚ÇÇ2·µá is p ‚ãØ ‚¶Öpr‚ÇÇ‚¶Ü

  ind‚ÇÉ : ‚àÄ is {js} ‚Üí 1·µá is ‚â§ js ‚Üí Lens (Array A js) A
  ind‚ÇÉ 0·µá      {1·µá js} p = ‚¶Öhead1·µá‚¶Ü
  ind‚ÇÉ 0·µá      {2·µá js} p = ‚¶Öhead2·µá‚¶Ü ‚ãØ ‚¶Öpr‚ÇÅ‚¶Ü
  ind‚ÇÉ (1·µá is) {1·µá js} p = ‚¶Ötail1·µá‚¶Ü ‚ãØ ind‚ÇÉ is p ‚ãØ ‚¶Öpr‚ÇÇ‚¶Ü
  ind‚ÇÉ (1·µá is) {2·µá js} p = ‚¶Ötail2·µá‚¶Ü ‚ãØ ind‚ÇÉ is p ‚ãØ ‚¶Öpr‚ÇÅ‚¶Ü
  ind‚ÇÉ (2·µá is) {1·µá js} p = ‚¶Ötail1·µá‚¶Ü ‚ãØ ind‚ÇÇ2·µá is p ‚ãØ ‚¶Öpr‚ÇÇ‚¶Ü
  ind‚ÇÉ (2·µá is) {2·µá js} p = ‚¶Ötail2·µá‚¶Ü ‚ãØ ind‚ÇÇ2·µá is p ‚ãØ ‚¶Öpr‚ÇÅ‚¶Ü

at : ‚àÄ is {js} ‚Üí {p : is < js} ‚Üí Lens (Array A js) A
at is {p = p} = index is p

import Data.Nat as ‚Ñï

foldrP : ‚àÄ {p} (P : ‚Ñï ‚Üí Type p) ‚Üí (‚àÄ {n} ‚Üí A ‚Üí P n ‚Üí P (suc n)) ‚Üí P zero ‚Üí Array A ns ‚Üí P ‚ü¶ ns ‚áì‚üß
foldrP {ns = 0·µá} P f b [] = b
foldrP {ns = 1·µá ns} P f b (x ‚à∑‚ÇÅ xs) = f x (foldrP (Œª n ‚Üí P (n ‚Ñï.* 2)) (Œª { (x‚ÇÅ ‚äõ x‚ÇÇ) b ‚Üí f x‚ÇÅ (f x‚ÇÇ b) }) b xs)
foldrP {ns = 2·µá ns} P f b ((x‚ÇÅ ‚äõ x‚ÇÇ) ‚à∑‚ÇÇ xs) = f x‚ÇÅ (f x‚ÇÇ (foldrP (Œª n ‚Üí P (n ‚Ñï.* 2)) (Œª { (x‚ÇÅ ‚äõ x‚ÇÇ) b ‚Üí f x‚ÇÅ (f x‚ÇÇ b)}) b xs))

foldr : (A ‚Üí B ‚Üí B) ‚Üí B ‚Üí Array A ns ‚Üí B
foldr f b = foldrP (Œª _ ‚Üí _) f b

map : (A ‚Üí B) ‚Üí Array A ns ‚Üí Array B ns
map {ns = 0·µá}    f xs = []
map {ns = 1·µá ns} f (x ‚à∑‚ÇÅ xs) = f x ‚à∑‚ÇÅ map (Œª { (x‚ÇÅ ‚äõ x‚ÇÇ) ‚Üí f x‚ÇÅ ‚äõ f x‚ÇÇ }) xs
map {ns = 2·µá ns} f ((x‚ÇÅ ‚äõ x‚ÇÇ) ‚à∑‚ÇÇ xs) = (f x‚ÇÅ ‚äõ f x‚ÇÇ) ‚à∑‚ÇÇ map (Œª { (x‚ÇÅ ‚äõ x‚ÇÇ) ‚Üí f x‚ÇÅ ‚äõ f x‚ÇÇ }) xs

record ArraySyntax {a b} (A : Type a) (B : Type b) (n : ùîπ) : Type (a ‚Ñì‚äî b) where
  field [_] : B ‚Üí Array A n
open ArraySyntax ‚¶É ... ‚¶Ñ public

instance
  cons : ‚¶É _ : ArraySyntax A B ns ‚¶Ñ ‚Üí ArraySyntax A (A √ó B) (inc ns)
  [_] ‚¶É cons ‚¶Ñ (x , xs) = x ‚à∑ [ xs ]

instance
  sing : ArraySyntax A A (1·µá 0·µá)
  [_] ‚¶É sing ‚¶Ñ x = x ‚à∑‚ÇÅ []

import Data.List as List
open import Data.List using (List)

toList : Array A ns ‚Üí List.List A
toList = foldr List._‚à∑_ List.[]

fromList : (xs : List A) ‚Üí Array A ‚ü¶ List.length xs ‚áë‚üß
fromList List.[] = []
fromList (x List.‚à∑ xs) = x ‚à∑ fromList xs
