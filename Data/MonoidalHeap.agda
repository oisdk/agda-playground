{-# OPTIONS --cubical --safe #-}


open import Algebra
open import Relation.Binary
import Algebra.Construct.OrderedMonoid as OrdMon

module Data.MonoidalHeap {s} (mon : Monoid s) (_‚â§?_ : Total (OrdMon._‚â§_ mon)) where

open Monoid mon
open OrdMon mon

open import Prelude
open import Data.List using (List; _‚à∑_; [])
import Data.Nat as ‚Ñï
import Data.Nat.Properties as ‚Ñï

ùíÆ : Type s
ùíÆ = ùëÜ ‚Üí ùëÜ

‚ü¶_‚áë‚üß : ùëÜ ‚Üí ùíÆ
‚ü¶_‚áë‚üß = _‚àô_

‚ü¶_‚áì‚üß : ùíÆ ‚Üí ùëÜ
‚ü¶ x ‚áì‚üß = x Œµ

infixl 10 _‚äô_
_‚äô_ : (ùëÜ ‚Üí A) ‚Üí ùëÜ ‚Üí ùëÜ ‚Üí A
f ‚äô x = Œª y ‚Üí f (x ‚àô y)

infixr 6 _‚àπ_&_
record Heap‚Å∫ {v} (V : ùëÜ ‚Üí Type v) : Type (v ‚Ñì‚äî s) where
  constructor _‚àπ_&_
  inductive
  field
    key : ùëÜ
    val : V key
    children : List (Heap‚Å∫ (V ‚äô key))
open Heap‚Å∫ public

data Heap (V : ùëÜ ‚Üí Type a) : Type (a ‚Ñì‚äî s) where
  leaf : Heap V
  node : Heap‚Å∫ V ‚Üí Heap V

private
  variable
    v : Level
    V : ùëÜ ‚Üí Type v

lemma : ‚àÄ x y k ‚Üí x ‚â° y ‚àô k ‚Üí ‚ü¶ x ‚áë‚üß ‚â° ‚ü¶ y ‚áë‚üß ‚àò ‚ü¶ k ‚áë‚üß
lemma x y k x‚â°y‚àôk i z = (cong (_‚àô z) x‚â°y‚àôk Õæ assoc y k z) i

merge‚Å∫ : Heap‚Å∫ V ‚Üí Heap‚Å∫ V ‚Üí Heap‚Å∫ V
merge‚Å∫ {V = V} (x ‚àπ xv & xs) (y ‚àπ yv & ys) with x ‚â§? y
... | inl (k , x‚â§y) = x ‚àπ xv & (k ‚àπ subst V x‚â§y yv & subst (List ‚àò Heap‚Å∫ ‚àò _‚àò_ V) (lemma y x k x‚â§y) ys ‚à∑ xs)
... | inr (k , x‚â•y) = y ‚àπ yv & (k ‚àπ subst V x‚â•y xv & subst (List ‚àò Heap‚Å∫ ‚àò _‚àò_ V) (lemma x y k x‚â•y) xs ‚à∑ ys)

merge : Heap V ‚Üí Heap V ‚Üí Heap V
merge leaf ys = ys
merge (node xs) leaf = node xs
merge (node xs) (node ys) = node (merge‚Å∫ xs ys)

mergeQs‚Å∫ : Heap‚Å∫ V ‚Üí List (Heap‚Å∫ V) ‚Üí Heap‚Å∫ V
mergeQs‚Å∫ x‚ÇÅ [] = x‚ÇÅ
mergeQs‚Å∫ x‚ÇÅ (x‚ÇÇ ‚à∑ []) = merge‚Å∫ x‚ÇÅ x‚ÇÇ
mergeQs‚Å∫ x‚ÇÅ (x‚ÇÇ ‚à∑ x‚ÇÉ ‚à∑ xs) = merge‚Å∫ (merge‚Å∫ x‚ÇÅ x‚ÇÇ) (mergeQs‚Å∫ x‚ÇÉ xs)

mergeQs : List (Heap‚Å∫ V) ‚Üí Heap V
mergeQs [] = leaf
mergeQs (x ‚à∑ xs) = node (mergeQs‚Å∫ x xs)

singleton‚Å∫ : ‚àÄ x ‚Üí V x ‚Üí Heap‚Å∫ V
singleton‚Å∫ x xv .key = x
singleton‚Å∫ x xv .val = xv
singleton‚Å∫ x xv .children = []

singleton : ‚àÄ x ‚Üí V x ‚Üí Heap V
singleton x xv = node (singleton‚Å∫ x xv)

insert‚Å∫ : ‚àÄ x ‚Üí V x ‚Üí Heap‚Å∫ V ‚Üí Heap‚Å∫ V
insert‚Å∫ x xv = merge‚Å∫ (singleton‚Å∫ x xv)

insert : ‚àÄ x ‚Üí V x ‚Üí Heap V ‚Üí Heap V
insert x xv leaf = singleton x xv
insert x xv (node xs) = node (insert‚Å∫ x xv xs)

minView : Heap V ‚Üí Maybe (‚àÉ[ p ] V p √ó Heap (V ‚äô p))
minView leaf = nothing
minView (node (x ‚àπ xv & xs)) = just (x , xv , mergeQs xs)

variable
  v‚ÇÅ v‚ÇÇ : Level
  V‚ÇÅ : ùëÜ ‚Üí Type v‚ÇÅ
  V‚ÇÇ : ùëÜ ‚Üí Type v‚ÇÇ

mutual
  maps‚Å∫ : (‚àÄ {x} ‚Üí V‚ÇÅ x ‚Üí V‚ÇÇ x) ‚Üí List (Heap‚Å∫ V‚ÇÅ) ‚Üí List (Heap‚Å∫ V‚ÇÇ)
  maps‚Å∫ f [] = []
  maps‚Å∫ f (x ‚à∑ xs) = map‚Å∫ f x ‚à∑ maps‚Å∫ f xs

  map‚Å∫ : (‚àÄ {x} ‚Üí V‚ÇÅ x ‚Üí V‚ÇÇ x) ‚Üí Heap‚Å∫ V‚ÇÅ ‚Üí Heap‚Å∫ V‚ÇÇ
  map‚Å∫ f (k ‚àπ v & xs) = k ‚àπ f v & maps‚Å∫ f xs

map : (‚àÄ {x} ‚Üí V‚ÇÅ x ‚Üí V‚ÇÇ x) ‚Üí Heap V‚ÇÅ ‚Üí Heap V‚ÇÇ
map f leaf = leaf
map f (node x) = node (map‚Å∫ f x)

mutual
  size‚Å∫ : Heap‚Å∫ V ‚Üí ‚Ñï
  size‚Å∫ xs = suc (sizes‚Å∫ (xs .children))

  sizes‚Å∫ : List (Heap‚Å∫ V) ‚Üí ‚Ñï
  sizes‚Å∫ [] = 0
  sizes‚Å∫ (x ‚à∑ xs) = size‚Å∫ x ‚Ñï.+ sizes‚Å∫ xs

size : Heap V ‚Üí ‚Ñï
size leaf = 0
size (node x) = size‚Å∫ x

open import Data.Maybe using (maybe)
open import Path.Reasoning
open import Cubical.Foundations.Prelude using (substRefl)

lemma‚ÇÇ : ‚àÄ {x y : ùëÜ ‚Üí ùëÜ} xs (p : x ‚â° y) ‚Üí sizes‚Å∫ (subst (List ‚àò Heap‚Å∫ ‚àò _‚àò_ V) p xs) ‚â° sizes‚Å∫ xs
lemma‚ÇÇ {V = V} xs = J (Œª _ p ‚Üí sizes‚Å∫ (subst (List ‚àò Heap‚Å∫ ‚àò _‚àò_ V) p xs) ‚â° sizes‚Å∫ xs) (cong sizes‚Å∫ (substRefl {B = List ‚àò Heap‚Å∫ ‚àò _‚àò_ V} xs))

merge‚Å∫-size : (xs ys : Heap‚Å∫ V) ‚Üí size‚Å∫ (merge‚Å∫ xs ys) ‚â° size‚Å∫ xs ‚Ñï.+ size‚Å∫ ys
merge‚Å∫-size {V = V} (x ‚àπ xv & xs) (y ‚àπ yv & ys) with x ‚â§? y
merge‚Å∫-size {V = V} (x ‚àπ xv & xs) (y ‚àπ yv & ys) | inr (k , x‚â•y) =
  suc (suc (sizes‚Å∫ (subst (List ‚àò Heap‚Å∫ ‚àò _‚àò_ V) (lemma x y k x‚â•y) xs)) ‚Ñï.+ sizes‚Å∫ ys) ‚â°Àò‚ü® ‚Ñï.+-suc _ (sizes‚Å∫ ys) ‚ü©
  suc (sizes‚Å∫ (subst (List ‚àò Heap‚Å∫ ‚àò _‚àò_ V) (lemma x y k x‚â•y) xs)) ‚Ñï.+ suc (sizes‚Å∫ ys) ‚â°‚ü® cong (‚Ñï._+ suc (sizes‚Å∫ ys)) (cong suc (lemma‚ÇÇ {V = V} xs (lemma x y k x‚â•y))) ‚ü©
  suc (sizes‚Å∫ xs) ‚Ñï.+ suc (sizes‚Å∫ ys) ‚àé
merge‚Å∫-size {V = V} (x ‚àπ xv & xs) (y ‚àπ yv & ys) | inl (k , x‚â§y) =
  suc (suc (sizes‚Å∫ (subst (List ‚àò Heap‚Å∫ ‚àò _‚àò_ V) (lemma y x k x‚â§y) ys)) ‚Ñï.+ sizes‚Å∫ xs) ‚â°Àò‚ü® ‚Ñï.+-suc _ (sizes‚Å∫ xs) ‚ü©
  suc (sizes‚Å∫ (subst (List ‚àò Heap‚Å∫ ‚àò _‚àò_ V) (lemma y x k x‚â§y) ys)) ‚Ñï.+ suc (sizes‚Å∫ xs) ‚â°‚ü® cong (‚Ñï._+ suc (sizes‚Å∫ xs)) (cong suc (lemma‚ÇÇ {V = V} ys (lemma y x k x‚â§y))) ‚ü©
  suc (sizes‚Å∫ ys) ‚Ñï.+ suc (sizes‚Å∫ xs) ‚â°‚ü® ‚Ñï.+-comm (suc (sizes‚Å∫ ys)) (suc (sizes‚Å∫ xs)) ‚ü©
  suc (sizes‚Å∫ xs) ‚Ñï.+ suc (sizes‚Å∫ ys) ‚àé


mutual
  minViewSize‚Å∫ : (xs : Heap‚Å∫ V) ‚Üí size‚Å∫ xs ‚â° suc (size (mergeQs (xs .children)))
  minViewSize‚Å∫ xs = cong suc (minViewSizes‚Å∫ (xs .children))

  minViewSizes‚Å∫ : (xs : List (Heap‚Å∫ V)) ‚Üí sizes‚Å∫ xs ‚â° size (mergeQs xs)
  minViewSizes‚Å∫ [] = refl
  minViewSizes‚Å∫ (x ‚à∑ xs) = minViewSizes‚Å∫‚Å∫ x xs

  minViewSizes‚Å∫‚Å∫ : (x : Heap‚Å∫ V) ‚Üí (xs : List (Heap‚Å∫ V)) ‚Üí sizes‚Å∫ (x ‚à∑ xs) ‚â° size‚Å∫ (mergeQs‚Å∫ x xs)
  minViewSizes‚Å∫‚Å∫ x‚ÇÅ [] = cong suc (‚Ñï.+-id ≥ _)
  minViewSizes‚Å∫‚Å∫ x‚ÇÅ (x‚ÇÇ ‚à∑ []) = cong (Œª z ‚Üí size‚Å∫ x‚ÇÅ ‚Ñï.+ z) (‚Ñï.+-id ≥ _) Õæ sym (merge‚Å∫-size x‚ÇÅ x‚ÇÇ)
  minViewSizes‚Å∫‚Å∫ x‚ÇÅ (x‚ÇÇ ‚à∑ x‚ÇÉ ‚à∑ xs) =
    size‚Å∫ x‚ÇÅ ‚Ñï.+ (size‚Å∫ x‚ÇÇ ‚Ñï.+ sizes‚Å∫ (x‚ÇÉ ‚à∑ xs)) ‚â°Àò‚ü® ‚Ñï.+-assoc (size‚Å∫ x‚ÇÅ) (size‚Å∫ x‚ÇÇ) (sizes‚Å∫ (x‚ÇÉ ‚à∑ xs)) ‚ü©
    (size‚Å∫ x‚ÇÅ ‚Ñï.+ size‚Å∫ x‚ÇÇ) ‚Ñï.+ sizes‚Å∫ (x‚ÇÉ ‚à∑ xs) ‚â°‚ü® cong ((size‚Å∫ x‚ÇÅ ‚Ñï.+ size‚Å∫ x‚ÇÇ) ‚Ñï.+_) (minViewSizes‚Å∫‚Å∫ x‚ÇÉ xs) ‚ü©
    (size‚Å∫ x‚ÇÅ ‚Ñï.+ size‚Å∫ x‚ÇÇ) ‚Ñï.+ size‚Å∫ (mergeQs‚Å∫ x‚ÇÉ xs) ‚â°Àò‚ü® cong (‚Ñï._+ size‚Å∫ (mergeQs‚Å∫ x‚ÇÉ xs)) (merge‚Å∫-size x‚ÇÅ x‚ÇÇ) ‚ü©
    size‚Å∫ (merge‚Å∫ x‚ÇÅ x‚ÇÇ) ‚Ñï.+ size‚Å∫ (mergeQs‚Å∫ x‚ÇÉ xs) ‚â°Àò‚ü® merge‚Å∫-size (merge‚Å∫ x‚ÇÅ x‚ÇÇ) (mergeQs‚Å∫ x‚ÇÉ xs) ‚ü©
    size‚Å∫ (merge‚Å∫ (merge‚Å∫ x‚ÇÅ x‚ÇÇ) (mergeQs‚Å∫ x‚ÇÉ xs)) ‚àé

minViewSize : (xs : Heap V) ‚Üí size xs ‚â° maybe zero (suc ‚àò size ‚àò snd ‚àò snd) (minView xs)
minViewSize leaf = refl
minViewSize (node x) = minViewSize‚Å∫ x

-- open import Data.Nat.Order

-- toList : (xs : Heap V) ‚Üí List (‚àÉ[ p ] V p)
-- toList xs = go (size xs) xs (‚â°‚Åø-refl (size xs))
--   where
--   go : (n : ‚Ñï) ‚Üí (xs : Heap V) ‚Üí (n ‚â°‚Åø size xs) ‚Üí List (‚àÉ[ p ] V p)
--   go n xs p with minView xs
--   go n xs p | nothing = []
--   go n xs p | just x = {!x!}

-- _>>=‚Å∫_ : Heap‚Å∫ V‚ÇÅ ‚Üí (‚àÄ {k} ‚Üí V‚ÇÅ k ‚Üí Heap (V‚ÇÇ ‚àò _‚àô_ k)) ‚Üí Heap V‚ÇÇ
-- xs >>=‚Å∫ f = {!!}

-- _>>=_ : Heap V‚ÇÅ ‚Üí (‚àÄ {k} ‚Üí V‚ÇÅ k ‚Üí Heap (V‚ÇÇ ‚àò _‚àô_ k)) ‚Üí Heap V‚ÇÇ
-- leaf >>= f = leaf
-- node x >>= f = x >>=‚Å∫ f
